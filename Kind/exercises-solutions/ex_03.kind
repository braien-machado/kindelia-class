// Basic Exercises involving Nats

type Nat {
  zero
  succ(pred: Nat)
}

// Increment
// 2 + 1 = 3
// 0 + 1 = 1
inc(a: Nat): Nat  
  Nat.succ(a)

// Decrement
// 2 - 1 = 1
// 0 - 1 = 0
dec(a: Nat): Nat
  case a {
    zero: Nat.zero
    succ: a.pred
  }

is_zero(a: Nat): Bool
  case a {
    zero: Bool.true
    succ: Bool.false
  }

ex_03: _
  let a1 = inc(Nat.zero) // 1
  let a2 = inc(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))) // 4
  let b1 = dec(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))) // 2
  let b2 = dec(Nat.zero) // 0
  let c1 = is_zero(Nat.zero) // Bool.true
  let c2 = is_zero(Nat.succ(Nat.zero)) // Bool.false

  List.show!(Nat.show [a1, a2, b1, b2])
  // List.show!(Bool.show [c1, c2])