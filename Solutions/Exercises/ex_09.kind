// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]

zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs {
    nil: List.nil<Pair<A, B>>
    cons: case ys {
      nil: List.nil<Pair<A, B>>
      cons: List.cons<Pair<A, B>>(Pair.new<A, B>(xs.head, ys.head), zip<A, B>(xs.tail, ys.tail))
    }
  }

// Returns the smallest element of a List

lte_nat(a: Nat, b: Nat): Bool
  case a {
    zero: Bool.true
    succ: case b {
      zero: Bool.false
      succ: lte_nat(a.pred, b.pred)
    }
  }

smallest.go(xs: List<Nat>, sm: Nat): Nat
  case xs {
    nil: sm
    cons: case lte_nat(xs.head, sm) {
      true: smallest.go(xs.tail, xs.head)
      false: smallest.go(xs.tail, sm)
    }
  }

smallest(xs: List<Nat>): Nat
  case xs {
    nil: Nat.zero
    cons: smallest.go(xs.tail, xs.head)
  }

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  ?d

// Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  ?a

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  ?g

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  ?f

ex_09: _
  let listNat = []
  let listString = ["a", "b", "c"]

  // // Shows list of pairs
  // List.show<Pair<Nat,String>>(Pair.show<Nat,String>(Nat.show, String.show), zip<Nat, String>(list1, list2))
  Nat.show(smallest(listNat))
