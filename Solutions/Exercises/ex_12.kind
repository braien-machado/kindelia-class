type BitsMap<A: Type> { 
  new
  tie(val: Maybe<A>, lft: BitsMap<A>, rgt: BitsMap<A>)
}

// Given a Key and a Value, sets the given value to that key in the tree, if
// that key already belongs to another value, it should be replaced with the new
// one

set<A: Type>(key: Bits, val: A, map: BitsMap<A>): BitsMap<A>
  case map {
    new: case key {
      e: BitsMap.tie<A>(Maybe.some<A>(val), BitsMap.new<A>, BitsMap.new<A>)
      o: BitsMap.tie<A>(Maybe.none<A>, set<A>(key.pred, val, map), BitsMap.new<A>)
      i: BitsMap.tie<A>(Maybe.none<A>, BitsMap.new<A>, set<A>(key.pred, val, map))
    }
    tie: case key {
      e: BitsMap.tie<A>(Maybe.some<A>(val), map.lft, map.rgt)
      o: BitsMap.tie<A>(map.val, set<A>(key.pred, val, map.lft), map.rgt)
      i: BitsMap.tie<A>(map.val, map.lft, set<A>(key.pred, val, map.rgt))
    }
  }

// Given a key, gets the value that correspond to the given key, 
// If there it is no value for the key, returns Maybe.none<A>

get<A: Type>(key: Bits, map:BitsMap<A>): Maybe<A>
  case map {
    new: Maybe.none<A>
    tie: case key {
      e: map.val
      o: get<A>(key.pred, map.lft)
      i: get<A>(key.pred, map.rgt)
    }
  }

//Applies a function to a Value of the specific key and returns the same map but
//with the specific value applied to the function, if the value isnt find,
//doesn't change the map

mut<A: Type>(key: Bits, fn: A -> A, map: BitsMap<A>): BitsMap<A>
  ?mut


//Deletes a Value of the map within the given key, returns the same map if no
//value is found for that key

//Receives:
  // key of the type Bits
  // map of the type BitsMap<A>
  // returns a BitsMap<A>

//del<A: Type>(...)


//Verifies if has any value for the given key, if has no value returns false, if
//has the value returns true
  
//Receives:
  // key of the type Bits
  // map of the type BitsMap<A>
  // returns a Bool

//has...



//Verifies all values of the map and if they don't match the condition gets
//removed, if the condition is matched, the value and the key are kept


filter<A: Type>(cond: A -> Bool, map: BitsMap<A>): BitsMap<A>
  ?filter



//Applies a function to  all values of the map and returns the map modified 

map<A: Type, B: Type>(fn: A -> B, map: BitsMap<A>): BitsMap<B>
  ?map



// Returns a list of keys with all Keys of the map

key<A: Type>(map: BitsMap<A>): List<Bits>
  ?key



//Unites two different maps into one, keeping its structure

union<A: Type>(a: BitsMap<A>, b: BitsMap<A>): BitsMap<A>
  ?union


//Stress Test for BitsMap

// stress_test(sets: Nat, gets: Nat): IO<Unit>
//   Tests.stress.bmap(sets, gets)

BitsMap.show<A: Type>(show: A -> String, map: BitsMap<A>): String
  BitsMap.show.go<A>(1, show, map)

BitsMap.show.go<A: Type>(depth: Nat, show: A -> String, map: BitsMap<A>): String
  let n = String.repeat(" ", depth)
    case map {
      new: " Empty"
      tie:
        " Tie(" | Maybe.show<A>(show, map.val) |
        "\n " | n | "Lft: " | BitsMap.show.go<A>(depth +1, show, map.lft) |
        "\n " | n | "Rgt: " | BitsMap.show.go<A>(depth +1, show, map.rgt) | ")"
    }

ex_12:_
//   stress_test(1000000, 1000000)
  let map = BitsMap.new!
  let map = set!(Bits.o(Bits.e), 0, map)
  let map = set!(Bits.i(Bits.e), 1, map)
  let map = set!(Bits.o(Bits.i(Bits.e)), 2, map)
  let map = set!(Bits.i(Bits.i(Bits.e)), 3, map)
  let map = set!(Nat.to_bits(185), 185, map)
  let map = set!(Nat.to_bits(14), 14, map)
// BitsMap.show!(Nat.show, map)

Maybe.show!(Nat.show, get!(Nat.to_bits(186), map))
